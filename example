# create virtualenv and then hit "pip install pymongo"
>>> from pymongo import MongoClient
>>> client = MongoClient('localhost', 27017)
>>> client.database_names()
['admin', 'config', 'local', 'mydb']
>>> db = client.mydb
>>> db
Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'mydb')
>>> db.collection_names()
['post']
>>> posts = db.post
>>> posts
Collection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'mydb'), 'post')
>>> db.posts.find()
<pymongo.cursor.Cursor object at 0x7f7830414438>
>>> records = db.posts.find()
>>> for r in records:
...     print(r)
{'_id': ObjectId('5ad868f8e9a609bc457bb74f'), 'title': 'FB Post', 'description': 'advertisement', 'by': 'xyz', 'url': 'xyz.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-04-19', 'like': 1.0}, {'user': 'lmn', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad86f9ae9a609bc457bb750'), 'title': 'Twitter Post', 'description': 'advertisement', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 25.0, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad8a089e9a609bc457bb751'), 'title': 'Instangram Post', 'description': 'marketing', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
>>> p = {'title': 'Telegram Post', 'description': 'marketing', 'by': 'vishal', 'url': 'abcd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrmnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]} 
>>> result = posts.insert_one(p)
>>> result
<pymongo.results.InsertOneResult object at 0x7f782a6692c8>
>>> print('One post: {0}'.format(result.inserted_id))
One post: 5af9379ff4856d148ffda8c6
>>> posts_data = [{'title': 'WhatsApp Post', 'description': 'marketing', 'by': 'chetan', 'url': 'cbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akvhdfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}, {'title': 'Wechat Post', 'description': 'marketing', 'by': 'chandan', 'url': 'cvgbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemn', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}]
>>> new_result = post.insert_many(posts_data)
>>> print('Multiple posts: {0}'.format(new_result.inserted_ids))
Multiple posts: [ObjectId('5af93985f4856d148ffda8c7'), ObjectId('5af93985f4856d148ffda8c8')]
>>> new_records = db.post.find()
>>> for r in new_records:    
...     print(r)
{'_id': ObjectId('5ad868f8e9a609bc457bb74f'), 'title': 'FB Post', 'description': 'advertisement', 'by': 'xyz', 'url': 'xyz.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-04-19', 'like': 1.0}, {'user': 'lmn', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad86f9ae9a609bc457bb750'), 'title': 'Twitter Post', 'description': 'advertisement', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 25.0, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad8a089e9a609bc457bb751'), 'title': 'Instangram Post', 'description': 'marketing', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5af9379ff4856d148ffda8c6'), 'title': 'Telegram Post', 'description': 'marketing', 'by': 'vishal', 'url': 'abcd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrmnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
{'_id': ObjectId('5af93985f4856d148ffda8c7'), 'title': 'WhatsApp Post', 'description': 'marketing', 'by': 'chetan', 'url': 'cbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akvhdfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
{'_id': ObjectId('5af93985f4856d148ffda8c8'), 'title': 'Wechat Post', 'description': 'marketing', 'by': 'chandan', 'url': 'cvgbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemn', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
>>> telegram_post = posts.find({'title':'telegram post'})
>>> telegram_post.count()
0
>>> telegram_post = posts.find({'title':'Telegram Post'}) #case sentive to search data
>>> telegram_post.count()
1
>>> for post in telegram_post:
...     print(post)
... 
{'_id': ObjectId('5af9379ff4856d148ffda8c6'), 'title': 'Telegram Post', 'description': 'marketing', 'by': 'vishal', 'url': 'abcd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrmnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
>>> telegram_post # find() returns a Cursor instance, which allows us to iterate over all matching documents.
<pymongo.cursor.Cursor object at 0x7f7830493550>
>>> telegram_post = posts.find_one({'title':'Telegram Post'}) # find_one() returns dict.
>>> telegram_post
{'_id': ObjectId('5af9379ff4856d148ffda8c6'), 'title': 'Telegram Post', 'description': 'marketing', 'by': 'vishal', 'url': 'abcd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrmnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
>>> posts.update({ 'description': "advertisement" },{ '$set': { "likes" : 100 } }, upsert=False, multi=True)
{'n': 2, 'nModified': 2, 'ok': 1.0, 'updatedExisting': True}
>>> for r in posts.find():
...     print(r)
... 
{'_id': ObjectId('5ad868f8e9a609bc457bb74f'), 'title': 'FB Post', 'description': 'advertisement', 'by': 'xyz', 'url': 'xyz.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 100, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-04-19', 'like': 1.0}, {'user': 'lmn', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad86f9ae9a609bc457bb750'), 'title': 'Twitter Post', 'description': 'advertisement', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 100, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad8a089e9a609bc457bb751'), 'title': 'Instangram Post', 'description': 'marketing', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5af9379ff4856d148ffda8c6'), 'title': 'Telegram Post', 'description': 'marketing', 'by': 'vishal', 'url': 'abcd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrmnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
{'_id': ObjectId('5af93985f4856d148ffda8c7'), 'title': 'WhatsApp Post', 'description': 'marketing', 'by': 'chetan', 'url': 'cbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akvhdfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
{'_id': ObjectId('5af93985f4856d148ffda8c8'), 'title': 'Wechat Post', 'description': 'marketing', 'by': 'chandan', 'url': 'cvgbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemn', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
>>> posts.delete_one({'description': 'marketing'})
>>> for r in posts.find():
...     print(r)
... 
{'_id': ObjectId('5ad868f8e9a609bc457bb74f'), 'title': 'FB Post', 'description': 'advertisement', 'by': 'xyz', 'url': 'xyz.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 100, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-04-19', 'like': 1.0}, {'user': 'lmn', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad86f9ae9a609bc457bb750'), 'title': 'Twitter Post', 'description': 'advertisement', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 100, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5af9379ff4856d148ffda8c6'), 'title': 'Telegram Post', 'description': 'marketing', 'by': 'vishal', 'url': 'abcd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrmnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
{'_id': ObjectId('5af93985f4856d148ffda8c7'), 'title': 'WhatsApp Post', 'description': 'marketing', 'by': 'chetan', 'url': 'cbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akvhdfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemnere', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}
{'_id': ObjectId('5af93985f4856d148ffda8c8'), 'title': 'Wechat Post', 'description': 'marketing', 'by': 'chandan', 'url': 'cvgbgfd.kom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 10.0, 'comments': [{'user': 'akfbc', 'message': 'good', 'dateCreated': '2018-05-14', 'like': 1.0}, {'user': 'lrvfemn', 'message': 'great', 'dateCreated': '2018-05-14', 'like': 2.0}]}

>>> posts.delete_many({'description': 'marketing'})
>>> for r in posts.find():
...     print(r)
... 
{'_id': ObjectId('5ad868f8e9a609bc457bb74f'), 'title': 'FB Post', 'description': 'advertisement', 'by': 'xyz', 'url': 'xyz.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 100, 'comments': [{'user': 'abc', 'message': 'good', 'dateCreated': '2018-04-19', 'like': 1.0}, {'user': 'lmn', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}
{'_id': ObjectId('5ad86f9ae9a609bc457bb750'), 'title': 'Twitter Post', 'description': 'advertisement', 'by': 'akshay', 'url': 'xyzdcsd.xom', 'tags': ['TAG1', 'TAG2', 'TAG3'], 'likes': 100, 'comments': [{'user': 'abcsfdc', 'message': 'good', 'dateCreated': '2018-04-20', 'like': 1.0}, {'user': 'lmnere', 'message': 'great', 'dateCreated': '2018-04-19', 'like': 2.0}]}

>>> posts.remove()   # removed all documents
{'n': 2, 'ok': 1.0}

------------------------------------------------------------------------------------------------------------------------------------------------
# MongoEngine(pip install mongoengine)

>>> import datetime
>>> from mongoengine import *
>>> connect('mydb')   # By default, MongoEngine assumes that the mongod instance is running on localhost on port 27017.
MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True, read_preference=Primary())
>>> class User(Document):
...     name = StringField()
... 
>>> class Comment(EmbeddedDocument):
...     content = StringField() 
... 
>>> class Page(Document):
...     title = StringField(max_length=200, required=True, unique=True)
...     content = StringField()
...     date_modified = DateTimeField(default=datetime.datetime.utcnow)
...     comments = ListField(EmbeddedDocumentField(Comment))
...     author = ReferenceField(User)
...
>>> user1 = User(name="john")
>>> user1.save()  #  If the document does not exist in the database, it will be created. If it is already exist, then update.
>>> user1.name
'john'
>>> user2 = User(name="marry")
>>> user2.save()
>>> user2.name
'marry'
>>> comment1 = Comment(content="good")
>>> comment1.save()
>>> comment2 = Comment(content="great work")
>>> comment2.save()
>>> page1 = Page(title="python", content="python is programming lang", comments=[comment1,comment2], author=user1)
>>> page1.save()
>>> page1.date_modified
datetime.datetime(2018, 5, 15, 9, 20, 8, 845431)
>>> page1.title
'python'
>>> page1.content
'python is programming lang'
>>> page1.comments
[<Comment: Comment object>, <Comment: Comment object>]
>>> page1.comments[0].content
'good'
>>> page1.author
<User: User object>
>>> page1.author.name
'john'
>>> page2 = Page(title="test", content="test", comments=[comment1], author=user2)
>>> page2.save()
>>> page1.id
ObjectId('5afaa9e9f4856d202540740d')
>>> page2.id
ObjectId('5afaabcff4856d2025407410')                                    
>>> page2.title
'test'
# Update operation
>>> page2.title = "java"
>>> page2.content = "java is programming lang"
>>> page2.comments = [comment1,comment2]
>>> page2.save()
>>> page2.title
'java'
>>> page2.content
'java is programming lang'
>>> page2.comments
[<Comment: Comment object>, <Comment: Comment object>]
>>> Page.objects
[<Page: Page object>, <Page: Page object>]
>>> l = [p.title for p in Page.objects]
>>> l
['python', 'java']
>>> Page.objects(comments__content="good")
[<Page: Page object>, <Page: Page object>]
>>> Page.objects(author__name="john")
    raise InvalidQueryError(e)
mongoengine.errors.InvalidQueryError: Cannot perform join in mongoDB: author__name

# aggregate functions
yearly_expense = Employee.objects.sum('salary')
mean_age = User.objects.average('age')

>>> Page.objects.count()
2
>>> Page.objects.update_one(set__title='Example Page') # updated first object only
1
>>> Page.objects[0].title
'Example Page'
>>> Page.objects[1].title
'java'
>>> Page.objects.update(content="Example content") # updated all objects
2
>>> Page.objects[0].content
'Example content'
>>> Page.objects[1].content
'Example content'
>>> 

# created custom queryset
class AwesomerQuerySet(QuerySet):

    def get_awesome(self):
        return self.filter(awesome=True)

class Page(Document):
    meta = {'queryset_class': AwesomerQuerySet}
# To call custom query set:
Page.objects.get_awesome()


# Slicing
>>> User.objects[1:]
[<User: User object>]
>>> 

# Delete operation
>>> Page.objects 
[<Page: Page object>, <Page: Page object>]
>>> Page.objects[0].delete()
>>> Page.objects
[<Page: Page object>]
>>> 

Note- Refer url- https://www.ibm.com/developerworks/library/os-django-mongo/index.html  to use mongodb with django.
